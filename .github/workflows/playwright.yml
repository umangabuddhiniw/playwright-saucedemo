name: Playwright Tests with Video Recording

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_ENV: test
  CI: true

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        npx playwright --version
        
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
        
    - name: Setup TypeScript for custom reporters
      run: |
        echo "=== Setting up TypeScript for CI ==="
        # Install ts-node for runtime TypeScript execution
        npm install --save-dev ts-node typescript @types/node
        
        # Verify custom reporter can be loaded
        node -e "
        require('ts-node').register({
          transpileOnly: true,
          compilerOptions: {
            module: 'commonjs',
            target: 'ES2022',
            esModuleInterop: true,
            skipLibCheck: true
          }
        });
        try {
          require('./src/utils/testRunner.ts');
          console.log('‚úÖ Custom reporter loads successfully');
        } catch (e) {
          console.log('‚ùå Custom reporter load failed:', e.message);
        }
        "
        
    - name: Run tests with VIDEO OPTIMIZED configuration
      run: |
        echo "üöÄ Starting tests with VIDEO OPTIMIZED CI configuration..."
        echo "=== CI Environment Variables ==="
        echo "CI: $CI"
        echo "NODE_ENV: $NODE_ENV"
        
        # üéØ CRITICAL: Use the exact configuration from playwright.config.ts
        npx playwright test \
          --config=playwright.config.ts \
          --project=chromium \
          --reporter=list,html,json,junit \
          --timeout=240000 \
          --retries=2 \
          --workers=1
      env:
        CI: true
        # üéØ CRITICAL: Video recording environment variables
        PLAYWRIGHT_VIDEO: retain-on-failure
        PLAYWRIGHT_SCREENSHOT: only-on-failure
        PLAYWRIGHT_TRACE: retain-on-failure
        
    - name: Debug artifact generation
      run: |
        echo "üîç DEBUGGING ARTIFACT GENERATION:"
        echo "=== Current directory ==="
        pwd
        ls -la
        
        echo "=== Full directory structure ==="
        find . -name "test-results" -type d 2>/dev/null | head -10
        find . -name "playwright-report" -type d 2>/dev/null | head -10
        
        echo "=== Test results content ==="
        if [ -d "test-results" ]; then
          echo "üìÅ test-results directory exists"
          ls -la test-results/
          
          echo "=== Videos check ==="
          find test-results -name "*.webm" -type f 2>/dev/null | head -10 | while read file; do
            echo "üé• Video: $file"
            ls -la "$file"
          done
          
          echo "=== Screenshots check ==="
          find test-results -name "*.png" -type f 2>/dev/null | head -10 | while read file; do
            echo "üì∏ Screenshot: $file"
            ls -la "$file"
          done
          
          echo "=== Trace files check ==="
          find test-results -name "*.zip" -type f 2>/dev/null | head -5
          
        else
          echo "‚ùå test-results directory not found"
        fi
        
        echo "=== Playwright reports check ==="
        if [ -d "playwright-report" ]; then
          echo "üìä playwright-report directory exists"
          ls -la playwright-report/
          echo "HTML Report: $(ls playwright-report/index.html 2>/dev/null && echo '‚úÖ' || echo '‚ùå')"
        else
          echo "‚ùå playwright-report directory not found"
        fi
        
        echo "=== Custom reports check ==="
        find . -name "test-report-*" -type f 2>/dev/null | head -5 || echo "No custom reports found"

    - name: Upload ALL artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-complete-results-${{ github.run_id }}
        path: |
          test-results/
          playwright-report/
        retention-days: 30
        compression-level: 0  # üéØ Faster upload for videos

    - name: Upload videos separately
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-videos-${{ github.run_id }}
        path: test-results/**/*.webm
        retention-days: 30
        compression-level: 0  # üéØ No compression for videos

    - name: Execution Report
      if: always()
      run: |
        echo "üìä EXECUTION REPORT:"
        echo "=== Test Results Summary ==="
        
        # Count artifacts
        SCREENSHOTS_COUNT=$(find test-results -name "*.png" -type f 2>/dev/null | wc -l || echo "0")
        VIDEOS_COUNT=$(find test-results -name "*.webm" -type f 2>/dev/null | wc -l || echo "0")
        TRACES_COUNT=$(find test-results -name "*.zip" -type f 2>/dev/null | wc -l || echo "0")
        
        echo "üéØ ARTIFACT SUMMARY:"
        echo "Screenshots: $SCREENSHOTS_COUNT"
        echo "Videos: $VIDEOS_COUNT"
        echo "Trace files: $TRACES_COUNT"
        echo "HTML Report: $(ls playwright-report/index.html 2>/dev/null && echo '‚úÖ PRESENT' || echo '‚ùå MISSING')"
        
        # Check for custom reports
        CUSTOM_REPORTS=$(find . -name "test-report-*" -type f 2>/dev/null | wc -l || echo "0")
        echo "Custom Reports: $CUSTOM_REPORTS"
        
        # üéØ VIDEO RECORDING VERIFICATION
        echo ""
        echo "üé• VIDEO RECORDING STATUS:"
        if [ "$VIDEOS_COUNT" -gt 0 ]; then
          echo "‚úÖ SUCCESS: Videos are being generated in CI!"
          echo "üìπ Video files found:"
          find test-results -name "*.webm" -type f 2>/dev/null | head -5
        else
          echo "‚ùå WARNING: No video files found"
          echo "üí° Check Playwright video configuration in playwright.config.ts"
        fi
        
        # üéØ SCREENSHOT VERIFICATION
        echo ""
        echo "üì∏ SCREENSHOT STATUS:"
        if [ "$SCREENSHOTS_COUNT" -gt 0 ]; then
          echo "‚úÖ SUCCESS: Screenshots are being generated!"
          echo "First 5 screenshots:"
          find test-results -name "*.png" -type f 2>/dev/null | head -5
        else
          echo "‚ö†Ô∏è  No screenshots found (may be normal if no tests failed)"
        fi

    - name: Test Summary
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            // Check if test results exist
            const testResultsPath = './test-results/test-results.json';
            let summary = '## üéØ Playwright Test Execution Summary\\n\\n';
            
            if (fs.existsSync(testResultsPath)) {
              const testResults = JSON.parse(fs.readFileSync(testResultsPath, 'utf8'));
              
              const stats = {
                total: 0,
                passed: 0,
                failed: 0,
                skipped: 0
              };
              
              testResults.suites?.forEach(suite => {
                suite.specs?.forEach(spec => {
                  spec.tests?.forEach(test => {
                    stats.total++;
                    if (test.status === 'expected') stats.passed++;
                    else if (test.status === 'unexpected') stats.failed++;
                    else if (test.status === 'skipped') stats.skipped++;
                  });
                });
              });
              
              const successRate = stats.total > 0 ? ((stats.passed / stats.total) * 100).toFixed(1) : '0';
              
              summary += `### üìä Test Results\\n`;
              summary += `- **Total Tests**: ${stats.total}\\n`;
              summary += `- **‚úÖ Passed**: ${stats.passed}\\n`;
              summary += `- **‚ùå Failed**: ${stats.failed}\\n`;
              summary += `- **‚è≠Ô∏è Skipped**: ${stats.skipped}\\n`;
              summary += `- **üìà Success Rate**: ${successRate}%\\n`;
            } else {
              summary += '### üìä Test Results\\n';
              summary += 'Test results file not found\\n';
            }
            
            // Add artifact information
            summary += '\\n### üé• Artifacts Generated\\n';
            
            // Check for videos
            const videoCount = require('child_process').execSync('find test-results -name "*.webm" -type f 2>/dev/null | wc -l').toString().trim();
            summary += `- **Videos**: ${videoCount}\\n`;
            
            // Check for screenshots
            const screenshotCount = require('child_process').execSync('find test-results -name "*.png" -type f 2>/dev/null | wc -l').toString().trim();
            summary += `- **Screenshots**: ${screenshotCount}\\n`;
            
            // Check for HTML report
            const hasHtmlReport = fs.existsSync('./playwright-report/index.html');
            summary += `- **HTML Report**: ${hasHtmlReport ? '‚úÖ Available' : '‚ùå Missing'}\\n`;
            
            summary += '\\n### üîß Configuration\\n';
            summary += '- **Browser**: Chromium\\n';
            summary += '- **Video Recording**: ‚úÖ Enabled\\n';
            summary += '- **CI Mode**: ‚úÖ Optimized\\n';
            
            core.summary = summary;
            
          } catch (error) {
            core.summary = `## ‚ùå Test Execution Summary\\n\\nError generating summary: ${error.message}`;
          }