name: Playwright Tests

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        # Verify critical dependencies
        npm list playwright typescript ts-node @playwright/test || echo "Dependency check completed"
        echo "‚úÖ Dependencies installed successfully"
      
    - name: Install Playwright Browsers
      run: |
        npx playwright install --with-deps
        npx playwright --version
        echo "Playwright browsers installed successfully"
      
    - name: Cache Playwright browsers
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Verify Playwright setup
      run: |
        echo "üîç Verifying Playwright setup..."
        npx playwright test --list --reporter=line > /dev/null 2>&1 || echo "Test listing completed"
        echo "‚úÖ Playwright setup verified"
        
        # Check if test files exist
        if [ -d "src/tests" ]; then
          echo "üìÅ Test directory found: src/tests/"
          find src/tests -name "*.spec.ts" -o -name "*.spec.js" | wc -l | xargs echo "Number of test files:"
        else
          echo "‚ùå Test directory not found: src/tests/"
          exit 1
        fi
      
    - name: Build TypeScript check
      run: |
        echo "üîß Checking TypeScript compilation..."
        if [ -f tsconfig.json ]; then
          npx tsc --noEmit --skipLibCheck
          echo "‚úÖ TypeScript compilation check passed"
        else
          echo "‚ÑπÔ∏è No tsconfig.json found, skipping TypeScript check"
        fi
      
    - name: Run Playwright tests
      timeout-minutes: 45
      run: |
        echo "üöÄ Starting Playwright tests..."
        echo "Configuration:"
        echo "  - Workers: 1"
        echo "  - Retries: ${{ github.event_name == 'pull_request' && '0' || '2' }}"
        echo "  - Fully Parallel: false"
        echo "  - Base URL: https://www.saucedemo.com"
        
        # Run tests with detailed output
        npx playwright test --reporter=list,html,json || echo "Test execution completed with exit code: $?"
        
        echo "üìä Test execution finished"
      env:
        CI: true
        NODE_ENV: test
        # Add any additional environment variables needed for your tests
        
    - name: Verify Test Results
      if: always()
      run: |
        echo "üîç Verifying test results..."
        
        # Check if custom reports were generated
        if [ -d "test-results/reports" ]; then
          echo "‚úÖ Custom reports directory exists"
          ls -la test-results/reports/ || echo "No custom reports found"
        else
          echo "‚ùå Custom reports directory not found"
        fi
        
        # Check if Playwright report was generated
        if [ -d "playwright-report" ]; then
          echo "‚úÖ Playwright HTML report generated"
        else
          echo "‚ùå Playwright HTML report not found"
        fi
        
        # Check if test results JSON exists
        if [ -f "test-results.json" ]; then
          echo "‚úÖ Playwright JSON results generated"
        else
          echo "‚ùå Playwright JSON results not found"
        fi
        
        # Check directory structure
        echo "üìÅ Final directory structure:"
        find test-results -type f -name "*.html" -o -name "*.json" -o -name "*.log" | head -10 || echo "No test result files found"
        
    - name: Display Test Summary
      if: always()
      run: |
        echo ""
        echo "üé≠ PLAYWRIGHT TEST EXECUTION SUMMARY"
        echo "===================================="
        echo "üìä Reports Generated:"
        
        # Count custom HTML reports
        if [ -d "test-results/reports" ]; then
          HTML_COUNT=$(find test-results/reports -name "*.html" | wc -l)
          echo "   ‚úÖ Custom HTML Reports: $HTML_COUNT"
        else
          echo "   ‚ùå Custom HTML Reports: 0"
        fi
        
        # Count custom JSON reports
        if [ -d "test-results/reports" ]; then
          JSON_COUNT=$(find test-results/reports -name "*.json" | wc -l)
          echo "   ‚úÖ Custom JSON Reports: $JSON_COUNT"
        else
          echo "   ‚ùå Custom JSON Reports: 0"
        fi
        
        # Check logs
        if [ -d "test-results/logs" ]; then
          LOG_COUNT=$(find test-results/logs -name "*.log" | wc -l)
          echo "   ‚úÖ Log Files: $LOG_COUNT"
        else
          echo "   ‚ùå Log Files: 0"
        fi
        
        echo ""
        echo "üì¶ Artifacts Available:"
        echo "   - playwright-html-report: Playwright HTML report"
        echo "   - playwright-test-results: Raw test results & custom reports"
        echo "   - playwright-media: Screenshots & videos"
        echo ""
        echo "üîß Configuration:"
        echo "   - Runner: Ubuntu Latest"
        echo "   - Node.js: 18"
        echo "   - Timeout: 60 minutes"
        echo "   - Workers: 1 (conservative mode)"
        echo "===================================="
        
    - name: Upload Playwright HTML Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-html-report
        path: playwright-report/
        retention-days: 30
        
    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: |
          test-results/
          test-results.json
        retention-days: 30
        
    - name: Upload Screenshots and Videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-media
        path: |
          test-results/**/*.png
          test-results/**/*.jpg  
          test-results/**/*.webm
          test-results/**/*.jpeg
        retention-days: 14
        
    - name: Upload Logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-logs
        path: |
          test-results/logs/
        retention-days: 7

  # ‚úÖ Enhanced status notification
  status:
    name: Test Status Summary
    runs-on: ubuntu-latest
    needs: test
    if: always()

    steps:
    - name: Download Test Results Artifact
      uses: actions/download-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: downloaded-results/
        
    - name: Analyze Test Results
      if: always()
      run: |
        echo "=========================================="
        echo "üéØ FINAL TEST EXECUTION SUMMARY"
        echo "=========================================="
        echo "Workflow Status: ${{ needs.test.result }}"
        echo "Test Job Status: ${{ needs.test.result }}"
        echo ""
        
        # Check for custom reports
        if [ -d "downloaded-results/test-results/reports" ]; then
          echo "‚úÖ CUSTOM REPORTS ANALYSIS:"
          echo "   üìä HTML Reports: $(find downloaded-results/test-results/reports -name '*.html' | wc -l)"
          echo "   üìÑ JSON Reports: $(find downloaded-results/test-results/reports -name '*.json' | wc -l)"
          
          # Try to get the latest JSON report for summary
          LATEST_JSON=$(find downloaded-results/test-results/reports -name "*.json" -type f | head -1)
          if [ -n "$LATEST_JSON" ]; then
            echo "   üìà Latest Report: $(basename $LATEST_JSON)"
          fi
        else
          echo "‚ùå No custom reports found in artifacts"
        fi
        
        # Check for logs
        if [ -d "downloaded-results/test-results/logs" ]; then
          echo "   üìù Log Files: $(find downloaded-results/test-results/logs -name '*.log' | wc -l)"
        fi
        
        echo ""
        echo "üìã RECOMMENDED ACTIONS:"
        
        case "${{ needs.test.result }}" in
          "success")
            echo "‚úÖ ALL TESTS PASSED"
            echo "   üöÄ Ready for deployment"
            echo "   üìä Review reports in artifacts"
            ;;
          "failure")
            echo "‚ùå TESTS FAILED"
            echo "   üîß Check 'playwright-test-results' artifact for details"
            echo "   üñºÔ∏è Check 'playwright-media' for screenshots/videos"
            echo "   üìñ Review 'playwright-logs' for execution logs"
            ;;
          "cancelled")
            echo "‚èπÔ∏è TESTS CANCELLED"
            echo "   ‚ö° Likely due to timeout or manual cancellation"
            echo "   üîÑ Consider increasing timeout or checking resource usage"
            ;;
          "skipped")
            echo "‚è≠Ô∏è TESTS SKIPPED"
            echo "   ‚ÑπÔ∏è Check workflow conditions and triggers"
            ;;
          *)
            echo "‚ö†Ô∏è TESTS COMPLETED WITH UNKNOWN STATUS"
            echo "   üìñ Check workflow logs for details"
            ;;
        esac
        
        echo ""
        echo "üì¶ AVAILABLE ARTIFACTS:"
        echo "   1. playwright-html-report - Playwright's HTML report"
        echo "   2. playwright-test-results - Raw results & custom reports" 
        echo "   3. playwright-media - Screenshots & videos"
        echo "   4. playwright-logs - Execution logs"
        echo ""
        echo "üîó QUICK ACCESS:"
        echo "   - Workflow Run: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
        echo "   - Repository: $GITHUB_SERVER_URL/$GITHUB_REPOSITORY"
        echo "=========================================="
        
    - name: Set final status
      if: always()
      run: |
        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "‚úÖ FINAL STATUS: SUCCESS"
          exit 0
        else
          echo "‚ùå FINAL STATUS: FAILED"
          exit 1
        fi